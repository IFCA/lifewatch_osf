# Record id
@extend
recid:
    producer:
        json_for_form(), {'recid': ''}


# period refers to the time period covered by the dataset
period:
    creator:
        marc, "0452_", { 'start': resolve_period(value['b'], 'start'), 'end': resolve_period(value['b'], 'end') }
    producer:
        json_for_marc(), {"0452_b": "start", "0452_b": "end" }
    json:
        loads, lambda d: {'start': __import__('datetime').datetime.strptime(d['start'], "%Y-%m-%d").date(), 'end': __import__('datetime').datetime.strptime(d['end'], "%Y-%m-%d").date()}
        dumps, lambda d: {'start': d['start'].isoformat(), 'end': d['end'].isoformat() }


upload_type:
    creator:
        @only_if_master_value(value['a'] in ['publication', 'poster', 'presentation', 'dataset', 'video', 'image', 'software', 'lesson'])
        marc, "980__", { 'type':value['a'], 'subtype':value['b'], }
    producer:
        json_for_marc(), {"980__a": "type", "980__b": "subtype"}
        json_for_form(), {"upload_type": "type"}
        json_for_form(), {"publication_type": "value['subtype'] if value['type'] == 'publication' else ''"}
        json_for_form(), {"image_type": "value['subtype'] if value['type'] == 'image' else ''"}

# Register type
collections:
    schema:
        {'collections': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value(not ((value['a'] or '').startswith('provisional-user-') or (value['a'] or '').startswith('user-') or value['a'] in ['publication', 'poster', 'presentation', 'dataset', 'video', 'image', 'software', 'lesson']))
        marc, "980__", { 'primary':value['a'], 'secondary':value['b'], 'deleted':value['c'] }
    producer:
        json_for_marc(), {"980__a": "primary", "980__b": "secondary", "980__c": "deleted"}


communities:
    schema:
        {'communities': {'type': 'list', 'force': True}}
    creator:
        @only_if_master_value((value['a'] or '').startswith('user-'))
        marc, "980__", value['a'][len('user-'):]
    producer:
        json_for_marc(), {"980__a": "'user-'+value"}
        json_for_form(), {"communities": "[{'identifier': value, 'provisional': False}]"}

#
# Basic information
#

# DOI
@persistent_identifier(1)
doi:
    creator:
        @only_if_master_value(((value['2'] or '').upper() == 'DOI') and ((value['q'] or '') == ''))
        marc, "0247_", value['a']
    producer:
        json_for_marc(), {'0247_2': 'str("DOI")', '0247_a': ''}
        json_for_form(), {"doi": ""}
        json_for_ld(), {'@id': '"http://dx.doi.org/" + value'}
        json_for_ld(), {'@context': 'str("http://schema.org")'}


publication_date:
    creator:
        @only_if_master_value(not value['a'] and not value['b'])
        marc, "260__", datetime.date(*(time.strptime(value['c'] or '', '%Y-%m-%d')[0:3]))
    producer:
        json_for_marc(), {"260__c": "value.isoformat()"}
        json_for_form(), {"publication_date": ""}
    json:
        loads, lambda d: __import__('datetime').datetime.strptime(d, "%Y-%m-%d").date()
        dumps, lambda d: d.isoformat()


title:
    creator:
        marc, "245__", value['a']
    producer:
        json_for_marc(), {"245__a": ""}
        json_for_form(), {"title": ""}


_first_author, first_author, creator:
    creator:
        @only_if_master_value(value['4'] is None or value['4'] == '')
        marc, "100__", { 'name':value['a'], 'affiliation':value['u'], 'gnd':resolve_authority(value['0'], 'gnd'), 'orcid':resolve_authority(value['0'], 'orcid'), 'familyname': value['a'].split(',')[0].strip(), 'givennames': ' '.join(value['a'].split(',')[1:]).strip()}
    producer:
        json_for_marc(), {"100__a": "name", "100__u": "affiliation", "100__0": "['(gnd)'+strip_prefix(value['gnd'], 'gnd:') if value.get('gnd') else None, '(orcid)'+value['orcid'] if value.get('orcid') else None]"}


_additional_authors, additional_authors:
    schema:
        {'_additional_authors': {'type': 'list', 'force': True}}
    creator:
        @parse_first('_first_author')
        @only_if_master_value(value['4'] is None or value['4'] == '')
        marc, "700__", {'name': value['a'], 'affiliation':value['u'], 'gnd': resolve_authority(value['0'], 'gnd'), 'orcid': resolve_authority(value['0'], 'orcid'), 'familyname': value['a'].split(',')[0].strip(), 'givennames': ' '.join(value['a'].split(',')[1:]).strip()}
    producer:
        json_for_marc(), {"700__a": "name", "700__u": "affiliation", "700__0": "['(gnd)'+strip_prefix(value['gnd'], 'gnd:') if value.get('gnd') else None, '(orcid)'+value['orcid'] if value.get('orcid') else None]"}


authors:
    """List with all the authors, connected with main_author and rest_authors"""
    derived:
        @parse_first('_first_author', '_additional_authors')
        @connect('_first_author', sync_authors)
        @connect('_additional_authors', sync_authors)
        @only_if('_first_author' in self or '_additional_authors' in self)
        util_merge_fields_info_list(self, ['_first_author', '_additional_authors'])
    producer:
        json_for_form(), {"creators": "[{'name': value.get('name',''), 'affiliation': value.get('affiliation',''), 'gnd': value.get('gnd', ''), 'orcid': value.get('orcid', '')}]"}
        json_for_ld(), {"author": "[{'@type': 'Person', 'name': value.get('name',''), '@id': 'http://orcid.org/' + value.get('orcid','') if value.get('orcid') else None, }]"}


description:
    creator:
        marc, "520__", value['a']
    producer:
        json_for_marc(), {"520__a": "",}
        json_for_form(), {"description": ""}


keywords:
    schema:
        {'keywords': {'type': 'list', 'force': True}}
    creator:
        marc, "6531_", value['a']
    producer:
        json_for_marc(), {"6531_a": "",}
        json_for_form(), {"keywords": "[value]"}
        json_for_ld(), {"keywords": "[value]"}


#Where in Zenodo
language:
    creator:
        marc, "041__", value['a']
    producer:
        json_for_marc(), {"041__a": ""}


#
# License details
#
access_right:
    creator:
        marc, "542__", value['l']
    producer:
        json_for_marc(), {"542__l": ""}
        json_for_form(), {"access_right": ""}


embargo_date:
    creator:
        marc, "942__", datetime.date(*(time.strptime(value['a'] or '', '%Y-%m-%d')[0:3]))
    producer:
        json_for_marc(), {"942__a": "self.get('embargo_date').isoformat()"}
        json_for_form(), {"embargo_date": ""}
    json:
        dumps, lambda d: d.isoformat()
        loads, lambda d: __import__('datetime').datetime.strptime(d, "%Y-%m-%d").date()


__license_text__:
    creator:
        marc, "540__", {'license':value['a'], 'url':value['u']}


__license_identifier__:
    creator:
        marc, "65017", {'source':value['2'], 'identifier':value['a']}


license:
    derived:
        @depends_on('__license_text__', '__license_identifier__')
        dict(self.get('__license_text__').items() + self.get('__license_identifier__').items())
    producer:
        json_for_marc(), {"540__a": "license", "540__u": "url"}
        json_for_marc(), {"650172": "source", "65017a": "identifier"}
        json_for_form(), {"license": "identifier"}
        json_for_ld(), {"license": "url"}


access_conditions:
    creator:
        marc, "506__", value['a']
    producer:
        json_for_marc(), {"506__a": "",}
        json_for_form(), {"access_conditions": ""}


# files
fft:
    schema:
        {'fft': {'type': 'list', 'force': True}}
    creator:
        marc, "FFT__", {'path': value['a'],
                        'description': value['d'],
                        'format': value['f'],
                        'temporary_id': value['i'],
                        'new_name': value['m'],
                        'name': value['n'],
                        'flag': value['o'],
                        'restriction': value['r'],
                        'timestamp': value['s'],
                        'docfile_type': value['t'],
                        'version': value['v'],
                        'icon_path': value['x'],
                        'comment': value['z'],
                        'document_moreinfo': value['w'],
                        'version_moreinfo': value['p'],
                        'version_format_moreinfo': value['b'],
                        'format_moreinfo': value['u']
                       }
        @only_if_master_value(is_local_url(value['u']))
        marc, "8564_", {'host_name': value['a'],
                        'access_number': value['b'],
                        'compression_information': value['c'],
                        'path':value['d'],
                        'electronic_name': value['f'],
                        'request_processor': value['h'],
                        'institution': value['i'],
                        'format': value['q'],
                        'settings': value['r'],
                        'file_size': value['s'],
                        'url': value['u'],
                        'subformat':value['x'],
                        'description':value['y'],
                        'comment':value['z']}
    producer:
        json_for_marc(), { "FFT__a": "path",
              "FFT__d": "description",
              "FFT__f": "format",
              "FFT__i": "temporary_id",
              "FFT__m": "new_name",
              "FFT__n": "name",
              "FFT__o": "flag",
              "FFT__r": "restriction",
              "FFT__s": "timestamp",
              "FFT__t": "docfile_type",
              "FFT__v": "version",
              "FFT__x": "icon_path",
              "FFT__z": "comment",
              "FFT__w": "document_moreinfo",
              "FFT__p": "version_moreinfo",
              "FFT__b": "version_format_moreinfo",
              "FFT__f": "format_moreinfo", }


_files:
    calculated:
        @parse_first('recid')
        get_files_from_bibdoc(self.get('recid', -1))
    description:
        """
        Retrieves all the files related with the recid that were passed to the system
        using the FFT field described above

        Note: this is a mandatory field and it shouldn't be remove from this configuration
        file. On the other hand the function that retrieve the metadata from BibDoc could
        be enrich.
        """
    producer:
        json_for_marc(), {"8564_z": "comment", "8564_y": "description", "8564_q": "format", "8564_f": "name", "8564_s": "size", "8564_u": "url"}
